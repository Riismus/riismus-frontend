{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","name","setName","size","setSize","listOfSquares","setListOfSquares","useEffect","Axios","get","then","response","data","className","type","placeholder","onChange","event","target","value","onClick","post","_id","map","val","id","newSize","prompt","put","updateSquareSize","delete","filter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAoEeA,MAhEf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACJC,EADI,KACEC,EADF,OAEaF,mBAAS,GAFtB,mBAEJG,EAFI,KAEEC,EAFF,OAG+BJ,mBAAS,IAHxC,mBAGJK,EAHI,KAGWC,EAHX,KAmCX,OANAC,qBAAU,WACNC,IAAMC,IAAI,sCAAsCC,MAAK,SAAAC,GACjDL,EAAiBK,EAASC,WAE/B,IAGC,sBAAKC,UAAU,MAAf,UACI,sBAAKA,UAAU,SAAf,UACI,uBAAOC,KAAK,OAAOC,YAAY,iBAAiBC,SAAW,SAAAC,GACvDf,EAAQe,EAAMC,OAAOC,UAEzB,uBAAOL,KAAK,SAASC,YAAY,iBAAiBC,SAAW,SAAAC,GACzDb,EAAQa,EAAMC,OAAOC,UAEzB,wBAAQC,QAvCF,WACdZ,IAAMa,KAAK,0CAA2C,CAACpB,KAAMA,EAAME,KAAMA,IAAOO,MAAK,SAAAC,GAAQ,OAAIL,EAAiB,GAAD,mBACzGD,GADyG,CAC1F,CAACiB,IAAKX,EAASC,KAAKU,IAAKrB,KAAMA,EAAME,KAAMA,UAqC1D,6BAGHE,EAAckB,KAAI,SAACC,GAChB,OAAO,gCAAMA,EAAIvB,KAAV,IAAiBuB,EAAIrB,KACxB,wBAAQiB,QAAS,YAtCR,SAACK,GACtB,IAAMC,EAAUC,OAAO,mBACvBnB,IAAMoB,IAAI,iDAAkD,CAACzB,KAAMuB,EAASD,GAAIA,IAAKf,MAAK,WACtFJ,EAAiBD,EAAckB,KAAI,SAAAJ,GAC/B,OAAOM,IAAON,EAAMG,IAAM,CAACA,IAAKG,EAAIxB,KAAMkB,EAAMlB,KAAME,KAAMuB,GAAWP,SAmC/DU,CAAiBL,EAAIF,MADzB,kBAIA,wBAAQF,QAAS,WAhCZ,IAACK,IAiCWD,EAAIF,IAhCjCd,IAAMsB,OAAN,+CAAqDL,IAAMf,MAAK,WAC5DJ,EAAiBD,EAAc0B,QAAO,SAAAZ,GAClC,OAAOA,EAAMG,MAAQG,UA6BjB,8BC7CLO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8ffe99ab.chunk.js","sourcesContent":["import './App.css';\r\nimport {useState, useEffect} from 'react'\r\nimport Axios from 'axios'\r\n\r\nfunction App() {\r\n    const [name, setName] = useState(\"\");\r\n    const [size, setSize] = useState(1);\r\n    const [listOfSquares, setListOfSquares] = useState([]);\r\n\r\n    const addSquare = () => {\r\n        Axios.post('https://riismus.herokuapp.com/addsquare', {name: name, size: size}).then(response => setListOfSquares(\r\n            [...listOfSquares, {_id: response.data._id, name: name, size: size}\r\n    ]))\r\n    };\r\n\r\n    const updateSquareSize = (id) => {\r\n        const newSize = prompt(\"Enter new size:\");\r\n        Axios.put('https://riismus.herokuapp.com/updatesquaresize', {size: newSize, id: id}).then(() => {\r\n            setListOfSquares(listOfSquares.map(value => {\r\n                return id === value._id ? {_id: id, name: value.name, size: newSize} : value;\r\n            }));\r\n\r\n        });\r\n    };\r\n\r\n    const deleteSquare = (id) => {\r\n        Axios.delete(`https://riismus.herokuapp.com/delete/${id}`).then(() => {\r\n            setListOfSquares(listOfSquares.filter(value => {\r\n                return value._id !== id;\r\n            }))\r\n        })\r\n    };\r\n\r\n    useEffect(() => {\r\n        Axios.get('https://riismus.herokuapp.com/read').then(response => {\r\n            setListOfSquares(response.data)\r\n        })\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"inputs\">\r\n                <input type=\"text\" placeholder=\"Square name...\" onChange={(event => {\r\n                    setName(event.target.value)\r\n                })}/>\r\n                <input type=\"number\" placeholder=\"Square size...\" onChange={(event => {\r\n                    setSize(event.target.value)\r\n                })}/>\r\n                <button onClick={addSquare}>Stack square</button>\r\n            </div>\r\n\r\n            {listOfSquares.map((val) => {\r\n                return <div>{val.name} {val.size}\r\n                    <button onClick={() => {\r\n                        updateSquareSize(val._id)\r\n                    }}>Edit\r\n                    </button>\r\n                    <button onClick={() => {\r\n                        deleteSquare(val._id)\r\n                    }}>Remove\r\n                    </button>\r\n                </div>\r\n            })}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}